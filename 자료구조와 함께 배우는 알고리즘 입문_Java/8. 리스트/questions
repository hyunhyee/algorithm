[q1]
```java
// 연습8-1＋연습8-2
// 선형 리스트 클래스(메서드 purge와 retrieve를 추가)

import java.util.Comparator;

public class LinkedList<E> {

	//--- 노드 ---//
	class Node<E> {
		private E data;					// 데이터
		private Node<E> next;		// 뒤쪽 포인터(다음 노드에 대한 참조)

		//--- 생성자 ---//
		Node(E data, Node<E> next) {
			this.data = data;
			this.next = next;
		}
	}

	private Node<E> head;		// 머리 포인터(머리 노드에 대한 참조)
	private Node<E> crnt;		// 선택 포인터(선택 노드에 대한 참조)

	//--- 생성자 ---//
	public LinkedList() {
		head = crnt = null;
	}

	//--- 노드 검색 ---//
	public E search(E obj, Comparator<? super E> c) {
		Node<E> ptr = head;							// 현재 스캔 중인 노드

		while (ptr != null) {
			if (c.compare(obj, ptr.data) == 0) {	// 검색 성공
				crnt = ptr;
				return ptr.data;
			}
			ptr = ptr.next;								// 다음 노드를 선택
		}
		return null;										// 검색 실패
	}

	//--- 머리에 노드를 삽입 ---//
	public void addFirst(E obj) {
		Node<E> ptr = head;					// 삽입 전의 머리 노드
		head = crnt = new Node<E>(obj, ptr);
	}

	//--- 꼬리에 노드를 삽입 ---//
	public void addLast(E obj) {
		if (head == null)				// 리스트가 비어 있으면 
			addFirst(obj);				// 머리에 삽입
		else {
			Node<E> ptr = head;
			while (ptr.next != null)
				ptr = ptr.next;
			ptr.next = crnt = new Node<E>(obj, null);
		}
	}

	//--- 머리 노드를 삭제 ---//
	public void removeFirst() {
		if (head != null)						// 리스트가 비어 있지 않으면
			head = crnt = head.next;
	}

	//--- 꼬리 노드를 삭제 ---//
	public void removeLast() {
		if (head != null) {
			if (head.next == null)		// 노드가 하나뿐이면 
				removeFirst();					// 머리 노드를 삭제
			else {
				Node<E> ptr = head;			// 스캔 중인 노드
				Node<E> pre = head;			// 스캔 중인 노드의 앞쪽 노드

				while (ptr.next != null) {
					pre = ptr;
					ptr = ptr.next;
				}
				pre.next = null;				// pre는 삭제 후의 꼬리 노드
				crnt = pre;
			}
		}
	}

	//--- 노드 p를 삭제 ---//
	public void remove(Node p) {
		if (head != null) {
			if (p == head)				// p가 머리 노드이면 
				removeFirst();			// 머리 노드를 삭제
			else {
				Node<E> ptr = head;

				while (ptr.next != p) {
					ptr = ptr.next;
					if (ptr == null) return;	// p가 리스트에 없음
				}
				ptr.next = p.next;
				crnt = ptr;
			}
		}
	}

	//--- 선택 노드를 삭제 ---//
	public void removeCurrentNode() {
		remove(crnt);
	}

	//--- 모든 노드를 삭제 ---//
	public void clear() {
		while (head != null)		// 노드에 아무것도 없을 때까지
			removeFirst();				// 머리 노드를 삭제
		crnt = null;
	}

	//--- 선택 노드를 하나 뒤쪽으로 진행 ---//
	public boolean next() {
		if (crnt == null || crnt.next == null)
			return false;					// 나아갈 수 없음
		crnt = crnt.next;
		return true;
	}

	//--- 선택 노드를 출력 ---//
	public void printCurrentNode() {
		if (crnt == null)
			System.out.println("선택한 노드가 없습니다.");
		else
			System.out.println(crnt.data);
	}

	//--- 모든 노드를 출력 ---//
	public void dump() {
		Node<E> ptr = head;

		while (ptr != null) {
			System.out.println(ptr.data);
			ptr = ptr.next;
		}
	}

	//---【연습8-1】 컴퍼레이터c로 서로 같은 노드를 찾아 모든 노드를 삭제 ---//
	public void purge(Comparator<? super E> c) {
		Node<E> ptr = head;

		while (ptr != null) {
			int count = 0;
			Node<E> ptr2 = ptr;
			Node<E> pre = ptr;

			while (pre.next != null) {
				ptr2 = pre.next;
				if (c.compare(ptr.data, ptr2.data) == 0) {
					pre.next = ptr2.next;
					count++;
				} else
					pre = ptr2;
			}
			if (count == 0)
				ptr = ptr.next;
			else {
				Node<E> temp = ptr;
				remove(ptr);
				ptr = temp.next;
			}
		}
		crnt = head;
	}

  //---【연습8-2】 머리부터 n개 뒤 노드의 데이터에 대한 참조를 반환 ---//
  public E retrieve(int n) {
		Node<E> ptr = head;

		while (n >= 0 && ptr != null) {
			if (n-- == 0) {
				crnt = ptr;
				return ptr.data;				// 검색 성공
			}
			ptr = ptr.next;					// 다음 노드를 선택
		}
		return null;
	}
}


```

[q2]
```java

```

[q3]
```java
// 연습8-3
// 선형 리스트 클래스(꼬리 포인터도 관리)

import java.util.Comparator;

public class LinkedListX<E> {

	//--- 노드 ---//
	class Node<E> {
		private E data;         // 데이터
		private Node<E> next;   // 뒤쪽 포인터(다음 노드에 대한 참조)

		//--- 생성자 ---//
		Node(E data, Node<E> next) {
			this.data = data;
			this.next = next;
		}
	}

	private Node<E> head;		// 머리 포인터(머리 노드에 대한 참조)
	private Node<E> tail;		// 꼬리 포인터(꼬리 노드에 대한 참조)
	private Node<E> crnt;		// 선택 포인터(선택 노드에 대한 참조)

	//--- 생성자 ---//
	public LinkedListX() {
		head = tail = crnt = null;
	}

	//--- 노드 검색 ---//
	public E search(E obj, Comparator<? super E> c) {
		Node<E> ptr = head;							// 현재 스캔 중인 노드

		while (ptr != null) {
			if (c.compare(obj, ptr.data) == 0) {			// 검색 성공
				crnt = ptr;
				return ptr.data;
			}
			ptr = ptr.next;								// 다음 노드를 선택
		}
		return null;										// 검색 실패
	}

	//--- 머리에 노드를 삽입 ---//
	public void addFirst(E o) {
		boolean empty = (tail == null);
		Node<E> ptr = head;							// 삽입 전의 머리 노드
		head = crnt = new Node<E>(o, ptr);
		if (empty) tail = crnt;
	}

	//--- 꼬리에 노드를 삽입 ---//
	public void addLast(E o) {
		if (head == null)			// 리스트가 비어 있으면 
			addFirst(o);				// 머리에 삽입
		else {
			tail.next = crnt = new Node<E>(o, null);
			tail = crnt;
		}
	}

	//--- 머리 노드를 삭제 ---//
	public void removeFirst() {
		if (head != null) {					 // 리스트가 비어 있지 않으면
			head = crnt = head.next;
			if (head == null) tail = null;
		}
	}

	//--- 꼬리 노드를 삭제 ---//
	public void removeLast() {
		if (head != null) {
			if (head.next == null)		           // 노드가 하나뿐이면 
				removeFirst();					// 머리 노드를 삭제
			else {
				Node<E> ptr = head;			// 스캔 중인 노드
				Node<E> pre = head;			// 스캔 중인 노드의 앞쪽 노드

				while (ptr.next != null) {
					pre = ptr;
					ptr = ptr.next;
				}
				pre.next = null;				// pre는 삭제 후의 꼬리 노드
				tail = crnt = pre;
			}
		}
	}

	//--- 노드 p를 삭제 ---//
	public void remove(Node<E> p) {
		if (head != null) {
			if (p == head)						// p가 머리 노드이면 
				removeFirst();					// 머리 노드를 삭제
			else if (p == tail)				// p가 꼬리 노드이면 
				removeLast();						// 꼬리 노드를 삭제
			else {
				Node<E> ptr = head;

				while (ptr.next != p) {
					ptr = ptr.next;
					if (ptr == null) return;	// p가 리스트에 없음
				}
				ptr.next = p.next;
				crnt = ptr;
			}
		}
	}

	//--- 선택 노드를 삭제 ---//
	public void removeCurrentNode() {
		remove(crnt);
	}

	//--- 모든 노드를 삭제 ---//
	public void clear() {
		while (head != null)		// 노드에 아무것도 없을 때까지
			removeFirst();				// 머리 노드를 삭제
		crnt = null;
	}

	//--- 선택 노드를 하나 뒤쪽으로 진행 ---//
	public boolean next() {
		if (crnt == null || crnt.next == null)
			return false;					// 나아갈 수 없음
		crnt = crnt.next;
		return true;
	}

	//--- 선택 노드를 출력 ---//
	public void printCurrentNode() {
		if (crnt == null)
			System.out.println("선택한 노드가 없습니다.");
		else
			System.out.println(crnt.data.toString());
	}

	//--- 모든 노드를 출력 ---//
	public void dump() {
		Node<E> ptr = head;

		while (ptr != null) {
			System.out.println(ptr.data.toString());
			ptr = ptr.next;
		}
	}

	//---【연습8-1】 컴퍼레이터c로 서로 같은 노드를 찾아 모든 노드를 삭제 ---//
	public void purge(Comparator<? super E> c) {
		Node<E> ptr = head;

		while (ptr != null) {
			int count = 0;
			Node<E> ptr2 = ptr;
			Node<E> pre = ptr;

			while (pre.next != null) {
				ptr2 = pre.next;
				if (c.compare(ptr.data, ptr2.data) == 0) {
					pre.next = ptr2.next;
					count++;
				} else
					pre = ptr2;
			}
			if (count == 0)
				ptr = ptr.next;
			else {
				Node<E> temp = ptr;
				remove(ptr);
				ptr = temp.next;
			}
		}
		crnt = head;
	}

  //---【연습8-2】 머리부터 n개 뒤 노드의 데이터에 대한 참조를 반환 ---//
	public E retrieve(int n) {
		Node<E> ptr = head;

		while (n >= 0 && ptr != null) {
			if (n-- == 0) {
				crnt = ptr;
				return ptr.data;						// 검색 성공
			}
			ptr = ptr.next;							// 다음 노드를 선택
		}
		return null;
	}
}

```

[q4-5]
```java
// 연습8-4＋연습8-5
// 선형 리스트 클래스(배열 커서 버전)

import java.util.Comparator;

public class ArrayLinkedList<E> {

	//--- 노드 ---//
	class Node<E> {
		private E data;			// 데이터
		private int next;		// 리스트의 뒤쪽 포인터
		private int dnext;	// 프리 리스트의 뒤쪽 포인터

		//--- data와 next를 설정 ---//
		void set(E data, int next) {
			this.data = data;
			this.next = next;
		}
	}

	private Node<E>[] n;		// 리스트 본체
	private int size;				// 리스트의 용량(최대 데이터수)
	private int max;				// 사용 중인 꼬리 레코드
	private int head;				// 머리 노드
	private int crnt;				// 선택 노드
	private int deleted;		// 프리 리스트의 머리 노드
	private static final int NULL = -1;	// 다음 노드 없음/리스트가 가득 참

	//--- 생성자 ---//
	public ArrayLinkedList(int capacity) {
		head = crnt = max = deleted = NULL;
		try {
			n = new Node[capacity];
			for (int i = 0; i < capacity; i++)
				n[i] = new Node<E>();
			size = capacity;
		}
		catch (OutOfMemoryError e) {		// 배열의 생성에 실패
			size = 0;
		}
	}

	//--- 다음에 삽입하는 레코드의 인덱스를 구합니다 ---//
	private int getInsertIndex() {
		if (deleted == NULL) {					// 삭제할 레코드가 없음
			if (max < size)
				return ++max;								// 새 레코드를 사용
			else
				return NULL;								// 용량 넘침(over)
		} else {
			int rec = deleted;						// 프리 리스트에서 
			deleted = n[rec].dnext;				// 머리 rec을 꺼냄
			return rec;
		}
	}

	//--- 레코드idx를 프리 리스트에 등록 ---//
	private void deleteIndex(int idx) {
		if (deleted == NULL) {					// 삭제할 레코드가 없음
			deleted = idx;								// idx를 프리 리스트의 
			n[idx].dnext = NULL;					// 머리에 등록
		} else {
			int rec = deleted;						// idx를 프리 리스트의 
			deleted = idx;								// 머리에 삽입
			n[rec].dnext = rec;
		}
	}

	//--- 노드 검색 ---//
	public E search(E obj, Comparator<? super E> c) {
		int ptr = head;									// 현재 스캔 중인 노드

		while (ptr != NULL) {
			if (c.compare(obj, n[ptr].data) == 0) {
				crnt = ptr;
				return n[ptr].data;					// 검색 성공
			}
			ptr = n[ptr].next;						// 다음 노드를 선택
		}
		return null;										// 검색 실패
	}

	//--- 머리에 노드를 삽입 ---//
	public void addFirst(E obj) {
		int ptr = head;									// 삽입 전의 머리 노드
		int rec = getInsertIndex();
		if (rec != NULL) {
			head = crnt = rec;						// 인덱스 rec 인 레코드에 삽입
			n[head].set(obj, ptr);
		}
	}

	//--- 꼬리에 노드를 삽입 ---//
	public void addLast(E obj) {
		if (head == NULL)								// 리스트가 비어 있으면 
			addFirst(obj);								// 머리에 삽입
		else {
			int ptr = head;
			while (n[ptr].next != NULL)
				ptr = n[ptr].next;
			int rec = getInsertIndex();
			if (rec != NULL) {						// 인덱스 rec 인 레코드에 삽입
				n[ptr].next = crnt = rec;
				n[rec].set(obj, NULL);
			}
		}
	}

	//--- 머리 노드를 삭제 ---//
	public void removeFirst() {
		if (head != NULL) {							// 리스트가 비어 있지 않으면
			int ptr = n[head].next;
			deleteIndex(head);
			head = crnt = ptr;
		}
	}

	//--- 꼬리 노드를 삭제 ---//
	public void removeLast() {
		if (head != NULL) {
			if (n[head].next == NULL)			// 노드가 하나뿐이면 
				removeFirst();							// 머리 노드를 삭제
			else {
				int ptr = head;							// 스캔 중인 노드
				int pre = head;							// 스캔 중인 노드의 앞쪽 노드

				while (n[ptr].next != NULL) {
					pre = ptr;
					ptr = n[ptr].next;
				}
				n[pre].next = NULL;					// pre는 삭제 후의 꼬리 노드
				deleteIndex(pre);
				crnt = pre;
			}
		}
	}

	//--- 레코드p를 삭제 ---//
	public void remove(int p) {
		if (head != NULL) {
			if (p == head)								// p가 머리 노드이면 
				removeFirst();							// 머리 노드를 삭제
			else {
				int ptr = head;

				while (n[ptr].next != p) {
					ptr = n[ptr].next;
					if (ptr == NULL) return;	// p가 리스트에 없음
				}
				n[ptr].next = NULL;
				deleteIndex(ptr);
				n[ptr].next = n[p].next;
				crnt = ptr;
			}
		}
	}

	//--- 선택 노드를 삭제 ---//
	public void removeCurrentNode() {
		remove(crnt);
	}

	//--- 모든 노드를 삭제 ---//
	public void clear() {
		while (head != NULL)						// 노드에 아무것도 없을 때까지
			removeFirst();								// 머리 노드를 삭제
		crnt = NULL;
	}

	//--- 선택 노드를 하나 뒤쪽으로 진행 ---//
	public boolean next() {
		if (crnt == NULL || n[crnt].next == NULL)
			return false;									// 나아갈 수 없음
		crnt = n[crnt].next;
		return true;
	}

	//--- 선택 노드를 출력 ---//
	public void printCurrentNode() {
		if (crnt == NULL)
			System.out.println("선택한 노드가 없습니다.");
		else
			System.out.println(n[crnt].data);
	}

	//--- 모든 노드를 출력 ---//
	public void dump() {
		int ptr = head;

		while (ptr != NULL) {
			System.out.println(n[ptr].data);
			ptr = n[ptr].next;
		}
	}

	//---【연습8-4】 컴퍼레이터c로 서로 같은 노드를 찾아 모든 노드를 삭제 ---//
	public void purge(Comparator<? super E> c) {
		int ptr = head;

		while (ptr != NULL) {
			int count = 0;
			int ptr2 = ptr;
			int pre = ptr;

			while (n[pre].next != NULL) {
				ptr2 = n[pre].next;
				if (c.compare(n[ptr].data, n[ptr2].data) == 0) {
					remove(ptr2);
					count++;
				} else
					pre = ptr2;
			}
			if (count == 0)
				ptr = n[ptr].next;
			else {
				int temp = n[ptr].next;
				remove(ptr);
				ptr = temp;
			}
		}
		crnt = head;
	}

	//---【연습8-5】 머리부터 n개 뒤 노드의 데이터에 대한 참조를 반환 ---//
	public E retrieve(int n) {
		int ptr = head;

		while (n >= 0 && ptr != NULL) {
			if (n-- == 0) {
				crnt = ptr;
				return this.n[ptr].data;			// 검색 성공
			}
			ptr = this.n[ptr].next;					// 다음 노드를 선택
		}
		return null;
	}
}

```

[q6-1]
```java
// 연습8-4＋연습8-5
// 선형 리스트 클래스(배열 커서 버전)

import java.util.Comparator;

public class ArrayLinkedList<E> {

	//--- 노드 ---//
	class Node<E> {
		private E data;			// 데이터
		private int next;		// 리스트의 뒤쪽 포인터
		private int dnext;	// 프리 리스트의 뒤쪽 포인터

		//--- data와 next를 설정 ---//
		void set(E data, int next) {
			this.data = data;
			this.next = next;
		}
	}

	private Node<E>[] n;		// 리스트 본체
	private int size;				// 리스트의 용량(최대 데이터수)
	private int max;				// 사용 중인 꼬리 레코드
	private int head;				// 머리 노드
	private int crnt;				// 선택 노드
	private int deleted;		// 프리 리스트의 머리 노드
	private static final int NULL = -1;	// 다음 노드 없음/리스트가 가득 참

	//--- 생성자 ---//
	public ArrayLinkedList(int capacity) {
		head = crnt = max = deleted = NULL;
		try {
			n = new Node[capacity];
			for (int i = 0; i < capacity; i++)
				n[i] = new Node<E>();
			size = capacity;
		}
		catch (OutOfMemoryError e) {		// 배열의 생성에 실패
			size = 0;
		}
	}

	//--- 다음에 삽입하는 레코드의 인덱스를 구합니다 ---//
	private int getInsertIndex() {
		if (deleted == NULL) {					// 삭제할 레코드가 없음
			if (max < size)
				return ++max;								// 새 레코드를 사용
			else
				return NULL;								// 용량 넘침(over)
		} else {
			int rec = deleted;						// 프리 리스트에서 
			deleted = n[rec].dnext;				// 머리 rec을 꺼냄
			return rec;
		}
	}

	//--- 레코드idx를 프리 리스트에 등록 ---//
	private void deleteIndex(int idx) {
		if (deleted == NULL) {					// 삭제할 레코드가 없음
			deleted = idx;								// idx를 프리 리스트의 
			n[idx].dnext = NULL;					// 머리에 등록
		} else {
			int rec = deleted;						// idx를 프리 리스트의 
			deleted = idx;								// 머리에 삽입
			n[rec].dnext = rec;
		}
	}

	//--- 노드 검색 ---//
	public E search(E obj, Comparator<? super E> c) {
		int ptr = head;									// 현재 스캔 중인 노드

		while (ptr != NULL) {
			if (c.compare(obj, n[ptr].data) == 0) {
				crnt = ptr;
				return n[ptr].data;					// 검색 성공
			}
			ptr = n[ptr].next;						// 다음 노드를 선택
		}
		return null;										// 검색 실패
	}

	//--- 머리에 노드를 삽입 ---//
	public void addFirst(E obj) {
		int ptr = head;									// 삽입 전의 머리 노드
		int rec = getInsertIndex();
		if (rec != NULL) {
			head = crnt = rec;						// 인덱스 rec 인 레코드에 삽입
			n[head].set(obj, ptr);
		}
	}

	//--- 꼬리에 노드를 삽입 ---//
	public void addLast(E obj) {
		if (head == NULL)								// 리스트가 비어 있으면 
			addFirst(obj);								// 머리에 삽입
		else {
			int ptr = head;
			while (n[ptr].next != NULL)
				ptr = n[ptr].next;
			int rec = getInsertIndex();
			if (rec != NULL) {						// 인덱스 rec 인 레코드에 삽입
				n[ptr].next = crnt = rec;
				n[rec].set(obj, NULL);
			}
		}
	}

	//--- 머리 노드를 삭제 ---//
	public void removeFirst() {
		if (head != NULL) {							// 리스트가 비어 있지 않으면
			int ptr = n[head].next;
			deleteIndex(head);
			head = crnt = ptr;
		}
	}

	//--- 꼬리 노드를 삭제 ---//
	public void removeLast() {
		if (head != NULL) {
			if (n[head].next == NULL)			// 노드가 하나뿐이면 
				removeFirst();							// 머리 노드를 삭제
			else {
				int ptr = head;							// 스캔 중인 노드
				int pre = head;							// 스캔 중인 노드의 앞쪽 노드

				while (n[ptr].next != NULL) {
					pre = ptr;
					ptr = n[ptr].next;
				}
				n[pre].next = NULL;					// pre는 삭제 후의 꼬리 노드
				deleteIndex(pre);
				crnt = pre;
			}
		}
	}

	//--- 레코드p를 삭제 ---//
	public void remove(int p) {
		if (head != NULL) {
			if (p == head)								// p가 머리 노드이면 
				removeFirst();							// 머리 노드를 삭제
			else {
				int ptr = head;

				while (n[ptr].next != p) {
					ptr = n[ptr].next;
					if (ptr == NULL) return;	// p가 리스트에 없음
				}
				n[ptr].next = NULL;
				deleteIndex(ptr);
				n[ptr].next = n[p].next;
				crnt = ptr;
			}
		}
	}

	//--- 선택 노드를 삭제 ---//
	public void removeCurrentNode() {
		remove(crnt);
	}

	//--- 모든 노드를 삭제 ---//
	public void clear() {
		while (head != NULL)						// 노드에 아무것도 없을 때까지
			removeFirst();								// 머리 노드를 삭제
		crnt = NULL;
	}

	//--- 선택 노드를 하나 뒤쪽으로 진행 ---//
	public boolean next() {
		if (crnt == NULL || n[crnt].next == NULL)
			return false;									// 나아갈 수 없음
		crnt = n[crnt].next;
		return true;
	}

	//--- 선택 노드를 출력 ---//
	public void printCurrentNode() {
		if (crnt == NULL)
			System.out.println("선택한 노드가 없습니다.");
		else
			System.out.println(n[crnt].data);
	}

	//--- 모든 노드를 출력 ---//
	public void dump() {
		int ptr = head;

		while (ptr != NULL) {
			System.out.println(n[ptr].data);
			ptr = n[ptr].next;
		}
	}

	//---【연습8-4】 컴퍼레이터c로 서로 같은 노드를 찾아 모든 노드를 삭제 ---//
	public void purge(Comparator<? super E> c) {
		int ptr = head;

		while (ptr != NULL) {
			int count = 0;
			int ptr2 = ptr;
			int pre = ptr;

			while (n[pre].next != NULL) {
				ptr2 = n[pre].next;
				if (c.compare(n[ptr].data, n[ptr2].data) == 0) {
					remove(ptr2);
					count++;
				} else
					pre = ptr2;
			}
			if (count == 0)
				ptr = n[ptr].next;
			else {
				int temp = n[ptr].next;
				remove(ptr);
				ptr = temp;
			}
		}
		crnt = head;
	}

	//---【연습8-5】 머리부터 n개 뒤 노드의 데이터에 대한 참조를 반환 ---//
	public E retrieve(int n) {
		int ptr = head;

		while (n >= 0 && ptr != NULL) {
			if (n-- == 0) {
				crnt = ptr;
				return this.n[ptr].data;			// 검색 성공
			}
			ptr = this.n[ptr].next;					// 다음 노드를 선택
		}
		return null;
	}
}

```

[q6-2]
```java
// 연습8-6
// 선형 리스트 클래스(배열  커서 버전)

import java.util.Comparator;

public class ArrayLinkedListX<E> {

	//--- 노드 ---//
	class Node<E> {
		private E data;			// 데이터
		private int next;		// 리스트의 뒤쪽 포인터
		private int dnext;	// 프리 리스트의 뒤쪽 포인터

		//--- data와 next를 설정 ---//
		void set(E data, int next) {
			this.data = data;
			this.next = next;
		}
	}

	private Node<E>[] n;		// 리스트 본체
	private int size;				// 리스트의 용량(최대 데이터수)
	private int max;				// 사용 중인 꼬리 레코드
	private int head;				// 머리 노드
	private int tail;				// 꼬리 노드
	private int crnt;				// 선택 노드
	private int deleted;		// 프리 리스트의 머리 노드
	private static final int NULL = -1;	// 다음 노드가 없음/리스트가 가득 참

	//--- 생성자 ---//
	public ArrayLinkedListX(int capacity) {
		head = tail = crnt = max = deleted = NULL;
		try {
			n = new Node[capacity];
			for (int i = 0; i < capacity; i++)
				n[i] = new Node<E>();
			size = capacity;
		}
		catch (OutOfMemoryError e) {		// 배열의 생성에 실패
			size = 0;
		}
	}

	//--- 다음에 삽입하는 레코드의 인덱스를 구합니다 ---//
	private int getInsertIndex() {
		if (deleted == NULL) {					// 삭제할 레코드가 없음
			if (max < size)
				return ++max;								// 새 레코드를 사용
			else
				return NULL;								// 용량 넘침(over)
		} else {
			int rec = deleted;						// 프리 리스트에서 
			deleted = n[rec].dnext;				// 머리 rec을 꺼냄
			return rec;
		}
	}

	//--- 레코드idx를 프리 리스트에 등록 ---//
	private void deleteIndex(int idx) {
		if (deleted == NULL) {					// 삭제할 레코드가 없음
			deleted = idx;								// idx를 프리 리스트의 
			n[idx].dnext = NULL;					// 머리에 등록
		} else {
			int rec = deleted;						// idx를 프리 리스트의 
			deleted = idx;								// 머리에 삽입
			n[idx].dnext = rec;
		}
	}

	//--- 노드 검색 ---//
	public E search(E o, Comparator<? super E> c) {
		int ptr = head;									// 현재 스캔 중인 노드

		while (ptr != NULL) {
			if (c.compare(o, n[ptr].data) == 0) {
				crnt = ptr;
				return n[ptr].data;					// 검색 성공
			}
			ptr = n[ptr].next;						// 다음 노드를 선택
		}
		return null;										// 검색 실패
	}

	//--- 머리에 노드를 삽입 ---//
	public void addFirst(E o) {
		boolean empty = (tail == NULL);
		int ptr = head;									// 삽입 전의 머리 노드
		int rec = getInsertIndex();
		if (rec != NULL) {
			head = crnt = rec;						// 인덱스 rec 인 레코드에 삽입
			n[head].set(o, ptr);
			if (empty) tail = crnt;
		}
	}

	//--- 꼬리에 노드를 삽입 ---//
	public void addLast(E o) {
		if (head == NULL)								// 리스트가 비어 있으면 
			addFirst(o);									// 머리에 삽입
		else {
			int rec = getInsertIndex();
			if (rec != NULL) {
				n[tail].next = crnt = rec;
				n[rec].set(o, NULL);
				tail = rec;
			}
		}
	}

	//--- 머리 노드를 삭제 ---//
	public void removeFirst() {
		if (head != NULL) {							// 리스트가 비어 있지 않으면
			int ptr = n[head].next;
			deleteIndex(head);
			head = crnt = ptr;
			if (head == NULL) tail = NULL;
		}
	}

	//--- 꼬리 노드를 삭제 ---//
	public void removeLast() {
		if (head != NULL) {
			if (n[head].next == NULL)			// 노드가 하나뿐이면 
				removeFirst();							// 머리 노드를 삭제
			else {
				int ptr = head;							// 스캔 중인 노드
				int pre = head;							// 스캔 중인 노드의 앞쪽 노드

				while (n[ptr].next != NULL) {
					pre = ptr;
					ptr = n[ptr].next;
				}
				n[pre].next = NULL;					// pre는 삭제 후의 꼬리 노드
				deleteIndex(ptr);
				tail = crnt = pre;
			}
		}
	}

	//--- 레코드p를 삭제 ---//
	public void remove(int p) {
		if (head != NULL) {
			if (p == head)								// p가 머리 노드이면 
				removeFirst();							// 머리 노드를 삭제
			else if (p == tail)						// p가 꼬리 노드이면 
				removeLast();								// 꼬리 노드를 삭제
			else {
				int ptr = head;

				while (n[ptr].next != p) {
					ptr = n[ptr].next;
					if (ptr == NULL) return;	// p가 리스트에 없음
				}
				n[ptr].next = n[p].next;
				deleteIndex(p);
				crnt = ptr;
			}
		}
	}

	//--- 선택 노드를 삭제 ---//
	public void removeCurrentNode() {
		remove(crnt);
	}

	//--- 모든 노드를 삭제 ---//
	public void clear() {
		while (head != NULL)						// 노드에 아무것도 없을 때까지
			removeFirst();								// 머리 노드를 삭제
		crnt = NULL;
	}

	//--- 선택 노드를 하나 뒤쪽으로 진행 ---//
	public boolean next() {
		if (crnt == NULL || n[crnt].next == NULL)
			return false;									// 나아갈 수 없음
		crnt = n[crnt].next;
		return true;
	}

	//--- 선택 노드를 출력 ---//
	public void printCurrentNode() {
		if (crnt == NULL)
			System.out.println("선택한 노드가 없습니다.");
		else
			System.out.println(n[crnt].data.toString());
	}

	//--- 모든 노드를 출력 ---//
	public void dump() {
		int ptr = head;

		while (ptr != NULL) {
			System.out.println(n[ptr].data.toString());
			ptr = n[ptr].next;
		}
	}

	//--- 컴퍼레이터c로 서로 같은 노드를 찾아 모든 노드를 삭제 ---//
	public void purge(Comparator<? super E> c) {
		int ptr = head;

		while (ptr != NULL) {
			int count = 0;
			int ptr2 = ptr;
			int pre = ptr;

			while (n[pre].next != NULL) {
				ptr2 = n[pre].next;
				if (c.compare(n[ptr].data, n[ptr2].data) == 0) {
					remove(ptr2);
					count++;
				} else
					pre = ptr2;
			}
			if (count == 0)
				ptr = n[ptr].next;
			else {
				int temp = n[ptr].next;
				remove(ptr);
				ptr = temp;
			}
		}
		crnt = head;
	}

	//--- 머리부터 n개 뒤 노드의 데이터에 대한 참조를 반환 ---//
	public E retrieve(int n) {
		int ptr = head;

		while (n >= 0 && ptr != NULL) {
			if (n-- == 0) {
				crnt = ptr;
				return this.n[ptr].data;				// 검색 성공
			}
			ptr = this.n[ptr].next;						// 다음 노드를 선택
		}
		return null;
	}
}



```
[q7]
```java
// 연습8-7
// 원형 리스트 클래스

import java.util.Comparator;

public class CircularLinkedList<E> {

	//--- 노드 ---//
	class Node<E> {
		E data;					// 데이터
		Node<E> next;		// 뒤쪽 포인터(다음 노드에 대한 참조)

		//--- 생성자 ---//
		Node(E data) {
			this.data = data;
			this.next = this;
		}

		//--- 생성자 ---//
		Node(E data, Node<E> next) {
			this.data = data;
			this.next = next;
		}
	}

	private Node<E> head;			// 머리 노드
	private Node<E> tail;			// 꼬리 노드
	private Node<E> crnt;			// 선택 노드

	//--- 생성자 ---//
	public CircularLinkedList() {
		head = tail = crnt = null;
	}

	//--- 노드 검색 ---//
	public E search(E o, Comparator<? super E> c) {
		if (head != null) {
			Node<E> ptr = head;					// 현재 스캔 중인 노드

			do {
				if (c.compare(o, ptr.data) == 0) {	// 검색 성공
					crnt = ptr;
					return ptr.data;
				}
				ptr = ptr.next; 						// 다음 노드를 선택
			} while (ptr != head);
		}
		return null;										// 검색 실패
	}

	//--- 머리에 노드를 삽입 ---//
	public void addFirst(E o) {
		if (head == null)
			head = tail = crnt = new Node<E>(o);
		else {
			Node<E> ptr = head;
			head = crnt = new Node<E>(o, ptr);
			tail.next = head;
		}
	}

	//--- 꼬리에 노드를 삽입 ---//
	public void addLast(E o) {
		if (head == null)			// 리스트가 비어 있으면 
			addFirst(o);				// 머리에 삽입
		else {
			Node<E> ptr = tail;
			ptr.next = crnt = tail = new Node<E>(o, head);
		}
	}

	//--- 머리 노드를 삭제 ---//
	public void removeFirst() {
		if (head != null) {					// 리스트가 비어 있지 않으면
			if (head == tail)
				head = tail = crnt = null;
			else {
				Node<E> ptr = head.next;
				head = crnt = ptr;
				tail.next = head;
			}
		}
	}

	//--- 꼬리 노드를 삭제 ---//
	public void removeLast() {
		if (head != null) {
			if (head == tail)					// 노드가 하나뿐이면 
				removeFirst();					// 머리 노드를 삭제
			else {
				Node<E> ptr = head;			// 스캔 중인 노드
				Node<E> pre = head;			// 스캔 중인 노드의 앞쪽 노드

				while (ptr.next != head) {
					pre = ptr;
					ptr = ptr.next;
				}
				pre.next = head;				// pre는 삭제 후의 꼬리 노드
				tail = crnt = pre;
			}
		}
	}

	//--- 노드 p를 삭제 ---//
	public void remove(Node<E> p) {
		if (head != null) {
			if (p == head)					// p가 머리 노드이면 
				removeFirst();				// 머리 노드를 삭제
			else if (p == tail)			// p가 꼬리 노드이면 
				removeLast();					// 꼬리 노드를 삭제
			else {
				Node<E> ptr = head;

				while (ptr.next != p) {
					ptr = ptr.next;
					if (ptr == head) return;	// p가 리스트에 없음
				}
				ptr.next = p.next;
				crnt = ptr;
			}
		}
	}

	//--- 선택 노드를 삭제 ---//
	public void removeCurrentNode() {
		remove(crnt);
	}

	//--- 모든 노드를 삭제 ---//
	public void clear() {
		while (head != null)		// 노드에 아무것도 없을 때까지
			removeFirst();				// 머리 노드를 삭제
		crnt = null;
	}

	//--- 선택 노드를 하나 뒤쪽으로 진행 ---//
	public boolean next() {
		if (crnt == null || crnt.next == head)
			return false;					// 나아갈 수 없음
		crnt = crnt.next;
		return true;
	}

	//--- 선택 노드를 출력 ---//
	public void printCurrentNode() {
		if (crnt == null)
			System.out.println("선택한 노드가 없습니다.");
		else
			System.out.println(crnt.data.toString());
	}

	//--- 모든 노드를 출력 ---//
	public void dump() {
		if (head != null) {
			Node<E> ptr = head;

			do {
				System.out.println(ptr.data.toString());
				ptr = ptr.next;
			} while (ptr != head);
		}
	}

	//--- 컴퍼레이터c로 서로 같은 노드를 찾아 모든 노드를 삭제 ---//
	public void purge(Comparator<? super E> c) {
		if (head == null) return;
		Node<E> ptr = head;

		do {
			int count = 0;
			Node<E> ptr2 = ptr;
			Node<E> pre = ptr;

			while (pre.next != head) {
				ptr2 = pre.next;
				if (c.compare(ptr.data, ptr2.data) == 0) {
					remove(ptr2);
					count++;
				} else
					pre = ptr2;
			}
			if (count == 0)
				ptr = ptr.next;
			else {
				Node<E> temp = ptr;
				remove(ptr);
				ptr = temp.next;
			}
		} while (ptr.next != head);
		crnt = head;
	}

	//--- 머리에서 n개 뒤 노드의 데이터에 대한 참조를 반환 ---//
	public E retrieve(int n) {
		if (head != null) {
			Node<E> ptr = head;

			while (n >= 0) {
				if (n-- == 0) {
					crnt = ptr;
					return ptr.data;			// 검색 성공
				}
				ptr = ptr.next;						// 다음 노드를 선택
				if (ptr == head) break;
			}
		}
		return null;
	}
}

```
[q8]
```java
// 연습8-6
// 선형 리스트 클래스(배열  커서 버전)

import java.util.Comparator;

public class ArrayLinkedListX<E> {

	//--- 노드 ---//
	class Node<E> {
		private E data;			// 데이터
		private int next;		// 리스트의 뒤쪽 포인터
		private int dnext;	// 프리 리스트의 뒤쪽 포인터

		//--- data와 next를 설정 ---//
		void set(E data, int next) {
			this.data = data;
			this.next = next;
		}
	}

	private Node<E>[] n;		// 리스트 본체
	private int size;				// 리스트의 용량(최대 데이터수)
	private int max;				// 사용 중인 꼬리 레코드
	private int head;				// 머리 노드
	private int tail;				// 꼬리 노드
	private int crnt;				// 선택 노드
	private int deleted;		// 프리 리스트의 머리 노드
	private static final int NULL = -1;	// 다음 노드가 없음/리스트가 가득 참

	//--- 생성자 ---//
	public ArrayLinkedListX(int capacity) {
		head = tail = crnt = max = deleted = NULL;
		try {
			n = new Node[capacity];
			for (int i = 0; i < capacity; i++)
				n[i] = new Node<E>();
			size = capacity;
		}
		catch (OutOfMemoryError e) {		// 배열의 생성에 실패
			size = 0;
		}
	}

	//--- 다음에 삽입하는 레코드의 인덱스를 구합니다 ---//
	private int getInsertIndex() {
		if (deleted == NULL) {					// 삭제할 레코드가 없음
			if (max < size)
				return ++max;								// 새 레코드를 사용
			else
				return NULL;								// 용량 넘침(over)
		} else {
			int rec = deleted;						// 프리 리스트에서 
			deleted = n[rec].dnext;				// 머리 rec을 꺼냄
			return rec;
		}
	}

	//--- 레코드idx를 프리 리스트에 등록 ---//
	private void deleteIndex(int idx) {
		if (deleted == NULL) {					// 삭제할 레코드가 없음
			deleted = idx;								// idx를 프리 리스트의 
			n[idx].dnext = NULL;					// 머리에 등록
		} else {
			int rec = deleted;						// idx를 프리 리스트의 
			deleted = idx;								// 머리에 삽입
			n[idx].dnext = rec;
		}
	}

	//--- 노드 검색 ---//
	public E search(E o, Comparator<? super E> c) {
		int ptr = head;									// 현재 스캔 중인 노드

		while (ptr != NULL) {
			if (c.compare(o, n[ptr].data) == 0) {
				crnt = ptr;
				return n[ptr].data;					// 검색 성공
			}
			ptr = n[ptr].next;						// 다음 노드를 선택
		}
		return null;										// 검색 실패
	}

	//--- 머리에 노드를 삽입 ---//
	public void addFirst(E o) {
		boolean empty = (tail == NULL);
		int ptr = head;									// 삽입 전의 머리 노드
		int rec = getInsertIndex();
		if (rec != NULL) {
			head = crnt = rec;						// 인덱스 rec 인 레코드에 삽입
			n[head].set(o, ptr);
			if (empty) tail = crnt;
		}
	}

	//--- 꼬리에 노드를 삽입 ---//
	public void addLast(E o) {
		if (head == NULL)								// 리스트가 비어 있으면 
			addFirst(o);									// 머리에 삽입
		else {
			int rec = getInsertIndex();
			if (rec != NULL) {
				n[tail].next = crnt = rec;
				n[rec].set(o, NULL);
				tail = rec;
			}
		}
	}

	//--- 머리 노드를 삭제 ---//
	public void removeFirst() {
		if (head != NULL) {							// 리스트가 비어 있지 않으면
			int ptr = n[head].next;
			deleteIndex(head);
			head = crnt = ptr;
			if (head == NULL) tail = NULL;
		}
	}

	//--- 꼬리 노드를 삭제 ---//
	public void removeLast() {
		if (head != NULL) {
			if (n[head].next == NULL)			// 노드가 하나뿐이면 
				removeFirst();							// 머리 노드를 삭제
			else {
				int ptr = head;							// 스캔 중인 노드
				int pre = head;							// 스캔 중인 노드의 앞쪽 노드

				while (n[ptr].next != NULL) {
					pre = ptr;
					ptr = n[ptr].next;
				}
				n[pre].next = NULL;					// pre는 삭제 후의 꼬리 노드
				deleteIndex(ptr);
				tail = crnt = pre;
			}
		}
	}

	//--- 레코드p를 삭제 ---//
	public void remove(int p) {
		if (head != NULL) {
			if (p == head)								// p가 머리 노드이면 
				removeFirst();							// 머리 노드를 삭제
			else if (p == tail)						// p가 꼬리 노드이면 
				removeLast();								// 꼬리 노드를 삭제
			else {
				int ptr = head;

				while (n[ptr].next != p) {
					ptr = n[ptr].next;
					if (ptr == NULL) return;	// p가 리스트에 없음
				}
				n[ptr].next = n[p].next;
				deleteIndex(p);
				crnt = ptr;
			}
		}
	}

	//--- 선택 노드를 삭제 ---//
	public void removeCurrentNode() {
		remove(crnt);
	}

	//--- 모든 노드를 삭제 ---//
	public void clear() {
		while (head != NULL)						// 노드에 아무것도 없을 때까지
			removeFirst();								// 머리 노드를 삭제
		crnt = NULL;
	}

	//--- 선택 노드를 하나 뒤쪽으로 진행 ---//
	public boolean next() {
		if (crnt == NULL || n[crnt].next == NULL)
			return false;									// 나아갈 수 없음
		crnt = n[crnt].next;
		return true;
	}

	//--- 선택 노드를 출력 ---//
	public void printCurrentNode() {
		if (crnt == NULL)
			System.out.println("선택한 노드가 없습니다.");
		else
			System.out.println(n[crnt].data.toString());
	}

	//--- 모든 노드를 출력 ---//
	public void dump() {
		int ptr = head;

		while (ptr != NULL) {
			System.out.println(n[ptr].data.toString());
			ptr = n[ptr].next;
		}
	}

	//--- 컴퍼레이터c로 서로 같은 노드를 찾아 모든 노드를 삭제 ---//
	public void purge(Comparator<? super E> c) {
		int ptr = head;

		while (ptr != NULL) {
			int count = 0;
			int ptr2 = ptr;
			int pre = ptr;

			while (n[pre].next != NULL) {
				ptr2 = n[pre].next;
				if (c.compare(n[ptr].data, n[ptr2].data) == 0) {
					remove(ptr2);
					count++;
				} else
					pre = ptr2;
			}
			if (count == 0)
				ptr = n[ptr].next;
			else {
				int temp = n[ptr].next;
				remove(ptr);
				ptr = temp;
			}
		}
		crnt = head;
	}

	//--- 머리부터 n개 뒤 노드의 데이터에 대한 참조를 반환 ---//
	public E retrieve(int n) {
		int ptr = head;

		while (n >= 0 && ptr != NULL) {
			if (n-- == 0) {
				crnt = ptr;
				return this.n[ptr].data;				// 검색 성공
			}
			ptr = this.n[ptr].next;						// 다음 노드를 선택
		}
		return null;
	}
}


```
[q9-10]
```java
// 연습8-9＋연습8-10
// 원형 이중 연결 리스트 클래스

import java.util.Comparator;

public class DoubleLinkedList<E> {

	//--- 노드 ---//
	class Node<E> {
		private E data;					// 데이터
		private Node<E> prev;		// 앞쪽 포인터(앞쪽 노드에 대한 참조)
		private Node<E> next;		// 뒤쪽 포인터(다음 노드에 대한 참조)

		//--- 생성자 ---//
		Node() {
			data = null;
			prev = next = this;
		}

		//--- 생성자 ---//
		Node(E obj, Node<E> prev, Node<E> next) {
			data = obj;
			this.prev = prev;
			this.next = next;
		}
	}

	private Node<E> head;		// 머리 포인터(참조하는 곳은 더미 노드)
	private Node<E> crnt;		// 선택 포인터

	//--- 생성자 ---//
	public DoubleLinkedList() {
		head = crnt = new Node<E>();		// 더미 노드를 생성
	}

	//--- 리스트가 비어 있는가? ---//
	public boolean isEmpty() {
		return head.next == head;
	}

	//--- 노드 검색 ---//
	public E search(E obj, Comparator<? super E> c) {
		Node<E> ptr = head.next;				// 현재 스캔 중인 노드

		while (ptr != head) {
			if (c.compare(obj, ptr.data) == 0) {
				crnt = ptr;
				return ptr.data;						// 검색 성공
			}
			ptr = ptr.next;								// 다음 노드를 선택
		}
		return null;										// 검색 실패
	}

	//--- 선택 노드를 출력 ---//
	public void printCurrentNode() {
		if (isEmpty())
			System.out.println("선택한 노드가 없습니다.");
		else
			System.out.println(crnt.data);
	}

	//--- 모든 노드를 출력 ---//
	public void dump() {
		Node<E> ptr = head.next;				// 더미 노드의 다음 노드

		while (ptr != head) {
			System.out.println(ptr.data);
			ptr = ptr.next;
		}
	}

	//--- 모든 노드를 역순으로 출력 ---//
	public void dumpReverse() {
		Node<E> ptr = head.prev;				// 더미 노드의 앞쪽 노드

		while (ptr != head) {
			System.out.println(ptr.data);
			ptr = ptr.prev;
		}
	}

	//--- 선택 노드를 하나 뒤쪽으로 진행 ---//
	public boolean next() {
		if (isEmpty() || crnt.next == head)
			return false;									// 나아갈 수 없음
		crnt = crnt.next;
		return true;
	}

	//--- 선택 노드를 하나 앞쪽으로 진행 ---//
	public boolean prev() {
		if (isEmpty() || crnt.prev == head)
			return false;									// 나아갈 수 없음
		crnt = crnt.prev;
		return true;
	}

	//--- 선택 노드의 바로 뒤에 노드를 삽입 ---//
	public void add(E obj) {
		Node<E> node = new Node<E>(obj, crnt, crnt.next);
		crnt.next = crnt.next.prev = node;
		crnt = node;
	}

	//--- 머리에 노드를 삽입 ---//
	public void addFirst(E obj) {
		crnt = head;										// 더미 노드 head의 바로 뒤에 삽입
		add(obj);
	}

	//--- 꼬리에 노드를 삽입 ---//
	public void addLast(E obj) {
		crnt = head.prev;								// 꼬리 노드 head.prev의 바로 뒤에 삽입
		add(obj);
	}

	//--- 선택 노드를 삭제 ---//
	public void removeCurrentNode() {
		if (!isEmpty()) {
			crnt.prev.next = crnt.next;
			crnt.next.prev = crnt.prev;
			crnt = crnt.prev;
			if (crnt == head) crnt = head.next;
		}
	}

	//--- 노드 p를 삭제 ---//
	public void remove(Node p) {
		Node<E> ptr = head.next;

		while (ptr != head) {
			if (ptr == p) {								// p를 찾음
				crnt = p;
				removeCurrentNode();
				break;
			}
			ptr = ptr.next;
		}
	}

	//--- 머리 노드를 삭제 ---//
	public void removeFirst() {
		crnt = head.next;								// 머리 노드 head.next를 삭제
		removeCurrentNode();
	}

	//--- 꼬리 노드를 삭제 ---//
	public void removeLast() {
		crnt = head.prev;								// 꼬리 노드 head.prev을 삭제
		removeCurrentNode();
	}

	//--- 모든 노드를 삭제 ---//
	public void clear() {
		while (!isEmpty())							// 노드에 아무것도 없을 때까지
			removeFirst();								// 머리 노드를 삭제
	}

	//---【연습8-9】 컴퍼레이터c로 서로 같은 노드를 찾아 모든 노드를 삭제 ---//
	public void purge(Comparator<? super E> c) {
		Node<E> ptr = head.next;

		while (ptr.next != head) {
			int count = 0;
			Node<E> ptr2 = ptr;
			Node<E> pre = ptr;

			while (pre.next != head) {
				ptr2 = pre.next;
				if (c.compare(ptr.data, ptr2.data) == 0) {
					pre.next = ptr2.next;
					count++;
				} else
					pre = ptr2;
			}
			if (count == 0)
				ptr = ptr.next;
			else {
				Node<E> temp = ptr;
				remove(ptr);
				ptr = temp.next;
			}
		}
		crnt = head;
	}

	//---【연습8-10】 머리부터 n개 뒤 노드의 데이터에 대한 참조를 반환 ---//
	public E retrieve(int n) {
		Node<E> ptr = head.next;

		while (n >= 0 && ptr.next.next != head) {
			if (n-- == 0) {
				crnt = ptr;
				return ptr.data;		// 검색 성공
			}
			ptr = ptr.next;				// 다음 노드를 선택
		}
		return null;
	}
}
```
